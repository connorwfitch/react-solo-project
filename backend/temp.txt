--------------------------------------------------------------------------------
Dependencies

npm init -y

  bcryptjs - password hashing
  cookie-parser - parsing cookies from requests
  cors - CORS
  csurf - CSRF protection
  dotenv - load environment variables into Node.js from a .env file
  express - Express
  express-async-handler - handling async route handlers
  express-validator - validation of request bodies
  helmet - security middleware
  jsonwebtoken - JWT
  morgan - logging information about server requests/responses
  per-env - use environment variables for starting app differently
  pg@">=8.4.1" - PostgresQL greater or equal to version 8.4.1
  sequelize@5 - Sequelize
  sequelize-cli@5 - use sequelize in the command line

npm install bcryptjs cookie-parser cors csurf dotenv express express-async-handler express-validator helmet jsonwebtoken morgan per-env pg@">=8.4.1" sequelize@5 sequelize-cli@5

  dotenv-cli - use dotenv in the command line
  nodemon - hot reload server backend files

npm install -D dotenv-cli nodemon


--------------------------------------------------------------------------------
JS Configuration

Generate a strong secret:
openssl rand -base64 10

Create a js config folder and export each environment variable


--------------------------------------------------------------------------------
Sequelize Configuration

Create .sequelizerc file with relevant exports

Initialize sequelize to the db folder
npx sequelize init

Refactor backend/config/database.js to allow loading the database configuration environment variables from the .env file into config/index.js

Create db user with same credentials as in .env
psql -c "CREATE USER <username> PASSWORD '<password>' CREATEDB"

Create the database using sequelize-cli
npx dotenv sequelize db:create


--------------------------------------------------------------------------------
Express Setup

Conducted in app.js
  Import and use various middleware modules
    - morgan
    - cookie-parser
    - express.json
    - cors (when not in production)
    - helmet
    - csurf


--------------------------------------------------------------------------------
Routes Setup

Create routes folder with index.js
  Create a test router and export it

Create bin folder with www file
  Add code for checking database connection before starting the app
  Add code to start listening for connections

Test the server
  Add scripts to package.json


--------------------------------------------------------------------------------
API Routes

Create api folder in backend/routes with an index.js
  Create a router therein and export and use it in main router file

Create test route and test using a fetch request in the devtools console
fetch('/api/test', {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `<value of XSRF-TOKEN cookie>`
  },
  body: JSON.stringify({ hello: 'world' })
}).then(res => res.json()).then(data => console.log(data));


--------------------------------------------------------------------------------
Server Error Handling

Add the following error handlers
  Resource Not Found
  Sequelize
  Error Formatter


--------------------------------------------------------------------------------
User Creation and Auth

Create a Users table with Sequelize with the following schema:
  id: integer, not null primary key
  username: string, not null, indexed, unique, max 30 characters
  email: string, not null, indexed, unique, max 256 characters
  hashedPassword: binary string, not null
  createdAt: datetime, not null, default value of now()
  updatedAt: datetime, not null, default value of now()

Generate migration and model file
npx sequelize model:generate --name User --attributes username:string,email:string,hashedPassword:string

Apply above constraints in the migration file

Migrate the Users table
npx dotenv sequelize db:migrate

Undo the migration
npx dotenv sequelize db:migrate:undo

In Users model add the following model-level constraints
  username: string, not null, unique, min 4 characters, max 30 characters, isNotEmail
  email: string, not null, unique, min 3 characters, max 256 characters, isEmail
  hashedPassword: binary string, not null, min and max 60 characters

Generate and apply demo users seed
npx sequelize seed:generate --name demo-user
npx dotenv sequelize db:seed:all

Undo seed
npx dotenv sequelize db:seed:undo:all

*Model Scopes*