--------------------------------------------------------------------------------
Dependencies

npm init -y

  bcryptjs - password hashing
  cookie-parser - parsing cookies from requests
  cors - CORS
  csurf - CSRF protection
  dotenv - load environment variables into Node.js from a .env file
  express - Express
  express-async-handler - handling async route handlers
  express-validator - validation of request bodies
  helmet - security middleware
  jsonwebtoken - JWT
  morgan - logging information about server requests/responses
  per-env - use environment variables for starting app differently
  pg@">=8.4.1" - PostgresQL greater or equal to version 8.4.1
  sequelize@5 - Sequelize
  sequelize-cli@5 - use sequelize in the command line

npm install bcryptjs cookie-parser cors csurf dotenv express express-async-handler express-validator helmet jsonwebtoken morgan per-env pg@">=8.4.1" sequelize@5 sequelize-cli@5

  dotenv-cli - use dotenv in the command line
  nodemon - hot reload server backend files

npm install -D dotenv-cli nodemon


--------------------------------------------------------------------------------
JS Configuration

Generate a strong secret:
openssl rand -base64 10

Create a js config folder and export each environment variable


--------------------------------------------------------------------------------
Sequelize Configuration

Create .sequelizerc file with relevant exports

Initialize sequelize to the db folder
npx sequelize init

Refactor backend/config/database.js to allow loading the database configuration environment variables from the .env file into config/index.js

Create db user with same credentials as in .env
psql -c "CREATE USER <username> PASSWORD '<password>' CREATEDB"

Create the database using sequelize-cli
npx dotenv sequelize db:create


--------------------------------------------------------------------------------
Express Setup

Conducted in app.js
  Import and use various middleware modules
    - morgan
    - cookie-parser
    - express.json
    - cors (when not in production)
    - helmet
    - csurf


--------------------------------------------------------------------------------
Routes Setup

Create routes folder with index.js
  Create a test router and export it

Create bin folder with www file
  Add code for checking database connection before starting the app
  Add code to start listening for connections

Test the server
  Add scripts to package.json


--------------------------------------------------------------------------------
API Routes

Create api folder in backend/routes with an index.js
  Create a router therein and export and use it in main router file

Create test route and test using a fetch request in the devtools console
fetch('/api/test', {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `<value of XSRF-TOKEN cookie>`
  },
  body: JSON.stringify({ hello: 'world' })
}).then(res => res.json()).then(data => console.log(data));


--------------------------------------------------------------------------------
Server Error Handling

Add the following error handlers
  Resource Not Found
  Sequelize
  Error Formatter


--------------------------------------------------------------------------------
User Creation and Auth

Create a Users table with Sequelize with the following schema:
  id: integer, not null primary key
  username: string, not null, indexed, unique, max 30 characters
  email: string, not null, indexed, unique, max 256 characters
  hashedPassword: binary string, not null
  createdAt: datetime, not null, default value of now()
  updatedAt: datetime, not null, default value of now()

Generate migration and model file
npx sequelize model:generate --name User --attributes username:string,email:string,hashedPassword:string

Apply above constraints in the migration file

Migrate the Users table
npx dotenv sequelize db:migrate

Undo the migration
npx dotenv sequelize db:migrate:undo

In Users model add the following model-level constraints
  username: string, not null, unique, min 4 characters, max 30 characters, isNotEmail
  email: string, not null, unique, min 3 characters, max 256 characters, isEmail
  hashedPassword: binary string, not null, min and max 60 characters

Generate and apply demo users seed
npx sequelize seed:generate --name demo-user
npx dotenv sequelize db:seed:all

Undo seed
npx dotenv sequelize db:seed:undo:all

Model scopes
  default: exclude hashedPassword, email, createdAt, updatedAt
  currentUser: exclude hashedPassword
  loginUser: exclude none

--Login Flow--
1. login route hit with a req body holding a valid credential (either username or email) and password combination
2. login handler will look for a User with the input credential in either the username or email columns
3. the hashedPassword for that found User will be compared with the input password for a match
4. if match, the login route should send back a JWT in an HTTP-only cookie and a response body
  - JWT and the body will hold the user's id, username, and email

--Signup Flow--
1. signup route hit with a req body holding a username, email, and password
2. signup handler creates a User with the corresponding username, email, and hashedPassword
3. upon successful creation, the signup route should send back a JWT in an HTTP-only cookie and a response body
  - JWT and the body will hold the user's id, username, and email

--Logout Flow--
1. logout route hit with a request
2. logout handler will remove teh JWT cookie set by the login or signup routes and return a JSON success message

Model methods (for API routes to interact with)
  Instance methods
    toSafeObject - returns an object with only the user instance information safe for JWTs
    validatePassword
  Static methods
    getCurrentUserById
    login
    signup

User auth middleware
  Create utils folder with auth.js
  Create the following utility functions for auth
    setTokenCookie
    restoreUser
    requireAuth
  Test the middleware functions


--------------------------------------------------------------------------------
User Auth Routes

Create session.js, users.js files in backend/routes/api

Add the following routes:
  Login: POST /api/session
  Logout: DELETE /api/session
  Signup: POST /api/users
  Get session user: GET /api/session


--------------------------------------------------------------------------------
Validating Request Bodies

Create validation.js in backend/utils
  create handleValidationErrors function and export it
Import it into backend/routes/api/session.js
  Use it, along with validateLogin to do exactly that
Import it into backend/routes/api/users.js
  Use it, along with validateSignup to do exactly that


--------------------------------------------------------------------------------
Models and Migrations
npx sequelize model:generate --name Story --attributes title:string,headerImgUrl:text,content:text,userId:integer
npx sequelize model:generate --name Comment --attributes content:text,userId:integer,storyId:integer
npx sequelize model:generate --name Like --attributes userId:integer,storyId:integer
npx sequelize model:generate --name Topic --attributes name:string
npx sequelize model:generate --name StoryTopic --attributes topicId:integer,storyId:integer

npx dotenv sequelize db:drop
npx dotenv sequelize db:create

npx dotenv sequelize db:migrate

--------------------------------------------------------------------------------
Seeders
npx sequelize seed:generate --name StorySeeder
npx sequelize seed:generate --name CommentSeeder
npx sequelize seed:generate --name TopicSeeder
npx sequelize seed:generate --name StoryTopicSeeder

npx dotenv sequelize db:seed:all